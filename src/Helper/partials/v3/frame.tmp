<?php

namespace Neoan3\Frame;

use Exception;
use Neoan3\Core\Serve;
use Neoan3\Provider\Attributes\UseAttributes;
use Neoan3\Provider\MySql\Database;
use Neoan3\Provider\MySql\DatabaseWrapper;
use Neoan3\Provider\Auth\JwtWrapper;
use Neoan3\Provider\Auth\Auth;
use Neoan3\Provider\Auth\AuthObject;

/**
 * Class {{name}}
 *
 * @package Neoan3\Frame
 * @generator Neoan3\Cli (for neoan3 v3.*)
 */
class {{name.pascal}} extends Serve
{
    /**
     * Db credential name
     * @var string
     */
    private string $dbCredentials = 'neoan3_db';
    /**
     * @var Database|DatabaseWrapper
     */
    public Database $db;

    public ?AuthObject $authObject;

    public Auth $Auth;

    /**
     * Demo constructor.
     * @param Database|null $db
     * @param Auth|null $auth
     * @throws Exception
     */
    function __construct(Database $db = null, Auth $auth = null)
    {
        parent::__construct();
        $this->assignProvider('db', $db, function(){
            try{
                $credentials = getCredentials();
                if(isset($credentials[$this->dbCredentials])){
                    $this->provider['db'] = new DatabaseWrapper($credentials[$this->dbCredentials]);
                } else {
                    throw new Exception('credentials!');
                }
            } catch (Exception $e) {
                $this->renderer->addToHead('title', '! No credentials found! Run "neoan3 new database '. $this->dbCredentials .'"');
                $this->provider['db'] = null;
            }
        });
        $this->assignProvider('auth', $auth, function (){
            $this->provider['auth'] = new JwtWrapper();
            $this->provider['auth']->setSecret('my-secret123-{{name}}');
        });

        // Backward compatability to 3.1.x Meanwhile, assignProvider returns the provider directly
        $this->Auth = $this->provider['auth'];

        /*
         * PHP8 Attributes
         * */
        if(PHP_MAJOR_VERSION >= 8){
            $phpAttributes = new UseAttributes();
            $phpAttributes->hookAttributes($this->provider);
            $this->authObject = $phpAttributes->authObject;
        }
    }

    /**
     * Overwriting Serve's constants()
     * @return array
     */
    function constants()
    {
        return [
            'base' => [base],
            'link' => [
                [
                    'sizes' => '32x32',
                    'type' => 'image/png',
                    'rel' => 'icon',
                    'href' => 'asset/neoan-favicon.png'
                ]
            ],
            'stylesheet' => [
                // https://gaudiamus-css.github.io/
                'https://cdn.jsdelivr.net/npm/gaudiamus-css@latest/css/gaudiamus.min.css',
            ]
        ];
    }
}
